version: '3'

networks:
  tali:

services:

  backend:
    build:
      context: ./backend
      dockerfile: ./Dockerfile
    environment:
      - DB_HOST=db
      - DB_USER=postgres
      - DB_PASS=${DB_PASS:-postgres}
      - DB_NAME=${DB_NAME:-postgres}
      - JWT_SECRET=${JWT_SECRET:-3123123213123}
      - JWT_REFRESH_SECRET=${JWT_REFRESH_SECRET:-75756756756}
      - BACKEND_URL=${BACKEND_URL:-http://localhost}
      - FRONTEND_URL=${FRONTEND_URL:-http://localhost:3000}
      - PROXY_PORT=${PROXY_PORT:-8080}
      - CHROME_ARGS=--no-sandbox --disable-setuid-sandbox
    ports:
      - ${BACKEND_PORT:-8080}:3000
    volumes:
      - ./backend/public/:/usr/src/app/public/
      - ./backend/.wwebjs_auth/:/usr/src/app/.wwebjs_auth/
    networks:
      - tali

  frontend:
    ports:
      - ${FRONTEND_PORT:-3000}:80
      - ${FRONTEND_SSL_PORT:-3001}:443
    build:
      context: ./frontend
      dockerfile: ./Dockerfile
    environment:
      - URL_BACKEND=backend:8080
      - REACT_APP_BACKEND_URL=${BACKEND_URL:-http://localhost}:${PROXY_PORT:-8080}/
      - FRONTEND_SERVER_NAME=${FRONTEND_SERVER_NAME}
      - BACKEND_SERVER_NAME=${BACKEND_SERVER_NAME}
    volumes:
      - ./ssl/certs/:/etc/nginx/ssl/
      - ./ssl/www/:/var/www/letsencrypt/
    networks:
      - tali

  db:
    image: postgres:14.1-alpine
    restart: always
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${DB_PASS:-postgres}
    ports:
      - '${DB_PORT:-5432}:5432'
    volumes: 
      - ./.docker/data/:/var/lib/postgresql/data
    networks:
      - tali
  cache:
    image: redis:6.2-alpine
    restart: always
    ports:
      - '${REDIS_PORT:-6379}:6379'
    command: redis-server --save 20 1 --loglevel warning --requirepass ${REDIS_PASSWORD:-f63f7abccf42c1211a72bda9f2b9d667fe5f12ddbec7986316eab281f070c45c}
    volumes: 
      - ./.docker/cache:/data
    networks:
      - tali